//
//  ContentView.swift
//  wispr
//
//  Created by Faisal Alalaiwat on 25.11.24.
//

import SwiftData
import SwiftUI

struct ItemListView: View {
    @State var conductor: Conductor
    @Query var items: [Item]

    init(modelContext: ModelContext) {
        let cond = Conductor(modelContext: modelContext)
        _conductor = State(initialValue: cond)
    }

    var body: some View {
        ScrollView {
            ListView(items: try! items.sorted(by: { $0.orderId < $1.orderId }).filter(conductor.activeDay.dayPredicate()))
                .environment(conductor)
        }

        Button("YESTERDAY") {
            conductor.activeDay.step(by: -1, type: .day)
        }

        Button("TOMORRO") {
            conductor.activeDay.step(by: 1, type: .day)
        }

        Button("ADD_EVENT") {
            addItem(.event)
        }

        Button("ADD_TODO") {
            addItem(.todo)
        }
    }

    private func addItem(_ type: ItemType) {
        var data = ItemData.todo(Todo())
        if type == .event {
            data = ItemData.event(Event(startDate: Date(), endDate: Date()))
        }

        withAnimation {
            let newItem = Item(timestamp: conductor.activeDay.start.advanced(by: 86399), orderId: items.count, type: type, data: data)
            conductor.modelContext.insert(newItem)
            try? conductor.modelContext.save()
        }
    }
}

struct ListView: View {
    @Environment(Conductor.self) var conductor: Conductor
    var items: [Item]
    @State var isTarget: Bool = false

    var body: some View {
        ForEach(try! items.filter(conductor.activeDay.dayPredicate()).sorted(by: { $0.timestamp < $1.timestamp })) { item in
            ItemView(item: item)
                .if(item.type != .event) { view in
                    view.draggable(item.record) {
                        Text("LOl")
                    }
                }
                .dropDestination(for: ItemRecord.self) { itemRecords, _ in
                    guard var movedItem = itemRecords.first else {
                        return false
                    }

                    let fromOrderId = movedItem.orderId
                    let toOrderId = item.orderId

                    if fromOrderId == toOrderId {
                        return false
                    }

                    if fromOrderId < toOrderId {
                        // Moving down
                        for affectedItem in items where affectedItem.orderId > fromOrderId && affectedItem.orderId <= toOrderId {
                            affectedItem.orderId -= 1
                        }
                    } else {
                        // Moving up
                        for affectedItem in items where affectedItem.orderId >= toOrderId && affectedItem.orderId < fromOrderId {
                            affectedItem.orderId += 1
                        }
                    }

                    movedItem.orderId = toOrderId
                    try? modelContext.save()
                    // movedItem.timestamp = item.timestamp.advanced(by: 1)
                    try? conductor.modelContext.save()
                    return true
                } isTargeted: { isTargeted in
                    isTarget = isTargeted
                }

            if item.children.count > 0 {
                ForEach(item.children) { child in
                    ItemView(item: child)
                        .if(item.type != .event) { view in
                            view.draggable(item.record) {
                                Text("LOl")
                            }
                        }
                }
            }
        }
    }
}

extension View {
    @ViewBuilder
    func `if`<Content: View>(_ condition: Bool, transform: (Self) -> Content) -> some View {
        if condition {
            transform(self)
        } else {
            self
        }
    }
}

struct ItemView: View {
    @State var item: Item

    var body: some View {
        RoundedRectangle(cornerRadius: 20).fill(item.type == .event ? .black : .white).overlay {
            HStack {
                Text(item.timestamp.formatted(date: .abbreviated, time: .shortened))
                Spacer()
                Text("\(item.type.rawValue)::")
                Text("\(item.orderId)")
            }.padding()
                .frame(height: 40)
                .foregroundStyle(item.type == .event ? .white : .black)
        }
    }
}

// @Observable
// class Item: Identifiable, Codable, Transferable {
//     var id: UUID
//     var orderId: Int
//     var type: ItemType
//     var createdAt: Date
//     var data: ItemData
//
//     static var transferRepresentation: some TransferRepresentation {
//         CodableRepresentation(contentType: .item)
//     }
//
//     init(item: Item) {
//         id = item.id
//         createdAt = item.createdAt
//         orderId = item.orderId
//         type = item.type
//         data = item.data
//     }
//
//     public func setOrderId(modelContext: ModelContext, orderId: Int) {
//         self.orderId = orderId
//         updateModel(modelContext: modelContext)
//     }
//
//     public func updateModel(modelContext: ModelContext) {
//         let fetch = FetchDescriptor<Item>(predicate: #Predicate<Item> { $0.id == id })
//
//         if let item = try? modelContext.fetch(fetch).first {
//             item.orderId = orderId
//             item.data = data
//             try? modelContext.save()
//         }
//     }
// }
